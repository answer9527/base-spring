<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.answer.base.dao.ClassicMapper">
    <!-- id:statement的id 或者叫做sql的id-->
    <!-- parameterType:声明输入参数的类型 -->
    <!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
    <!-- #{}：输入参数的占位符，相当于jdbc的？ -->
<!--    ${}：字符串拼接-->

    <!-- 通过id查询一个用户 -->
<!--    此处的type  Classic 是指 entity中的Classic-->
    <resultMap type="Classic" id="ClassicMap">
        <id column="id" property="id" jdbcType="INTEGER"></id>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"></result>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"></result>
        <result column="delete_time" property="deleteTime" jdbcType="TIMESTAMP"></result>
<!--            <result column="title" property="title" jdbcType="VARCHAR"></result>-->
<!--            <result column="intro" property="intro" jdbcType="VARCHAR"></result>-->
<!--            <result column="type" property="type" jdbcType="INTEGER"></result>-->
<!--            <result column="url" property="url" jdbcType="VARCHAR"></result>-->
<!--            <result column="image" property="image" jdbcType="VARCHAR"></result>-->
<!--            <result column="author" property="author" jdbcType="VARCHAR"></result>-->
    </resultMap>

    <sql id="base_column_list">
        id,create_time,update_time,delete_time,title,intro,url,author,image,type,like_count,is_recommend
    </sql>


    <!--根据获取最新的一个-->
    <select id="getRecommendLatest"  resultMap="ClassicMap">
        select <include refid="base_column_list"></include> from classic where is_recommend=true and delete_time is NULL ORDER by recommend_time desc limit 1;
    </select>

<!--    获取上一期推荐-->
    <select id="getRecommendPrevious" parameterType="INTEGER" resultMap="ClassicMap">
        select a.id,a.create_time,a.title,a.intro,a.url,a.author,a.image,a.type,a.like_count from classic a  join (select * from classic  where id=#{id}) b on b.recommend_time> a.recommend_time where a.is_recommend=true and a.delete_time is NULL ORDER by a.recommend_time desc limit 1;
    </select>

<!--获取下一期推荐-->
    <select id="getRecommendNext" parameterType="INTEGER" resultMap="ClassicMap">
        select a.id,a.create_time,a.title,a.intro,a.url,a.author,a.image,a.type,a.like_count from classic a  join (select * from classic  where id=#{id}) b on a.recommend_time> b.recommend_time where a.is_recommend=true and a.delete_time is NULL  ORDER by a.recommend_time  limit 1;
    </select>

<!--    添加一个内容-->
    <insert id="insertOne" parameterType="com.answer.base.entity.Classic">
        insert into classic(create_time,title,sub_title,intro,content,url,image,author,is_recommend) values(CURRENT_TIMESTAMP,#{title},#{sub_title},#{intro},#{content},#{url},#{image},#{author},#{is_recommend})
    </insert>

<!--    设置为推荐-->
    <update id="RecommendOne" parameterType="INTEGER">
        update classic
        <set>
            is_recommend=1
        </set>
        where id = #{id,jdbcType=INTEGER} and is_recommend!=1 and delete_time is null
    </update>

<!--    设置下架推荐-->
    <update id="removeRecommend" parameterType="INTEGER">
        update classic
        <set>
            is_recommend=0
        </set>
        where id = #{id,jdbcType=INTEGER} and is_recommend=1 and delete_time is null
    </update>

<!--    删除一条数据-->
    <update id="deleteOne" parameterType="INTEGER">
        update classic
        <set>
            delete_time = current_timestamp
        </set>
        where id =#{id,jdbcType =INTEGER} and delete_time is null
    </update>

<!--    分页查找我喜欢的列表-->
    <select id="getMyLike" parameterType="INTEGER" resultMap="ClassicMap">
       select * from classic a join user_like_classic b on b.uid=#{key} and a.id=b.cid
    </select>

<!--  设置喜欢  -->
    <insert id="setLike" parameterType="com.answer.base.dto.UserLikeUnlikeClassicDTO">
        insert into user_like_classic(create_time,uid,cid) select CURRENT_TIMESTAMP,#{uid},#{cid} from dual where not exists (select 1 from user_like_classic where uid=#{uid} and cid=#{cid})
    </insert>

<!--  设置取消喜欢 -->
    <delete id="cancelLike" parameterType="com.answer.base.dto.UserLikeUnlikeClassicDTO">
        delete from user_like_classic where uid=#{uid} and cid=#{cid}
    </delete>

<!--    更新classic的喜欢总数-->
    <update id="updateLikeCount" parameterType="com.answer.base.dto.ChangeLikeCountDTO">
        update classic
        <set>
            <if test="isAdd">
                like_count = like_count+1
            </if>
            <if test="!isAdd">
                like_count = like_count-1
            </if>
        </set>
        where id = #{cid} and delete_time is null
    </update>

<!--    按照类型查询classic列表-->
    <select id="getListByType" parameterType="com.answer.base.dto.PagingDTO" resultMap="ClassicMap">
            select <include refid="base_column_list"></include> from classic where delete_time is null <if test="key!=null">and  type=#{key} </if><if test="keyword!=null">and title like "%"#{keyword}"%"</if>
    </select>

<!--    根据id查找classic的详情-->
    <select id="getDetailById" parameterType="integer" resultMap="ClassicMap">
        select * from classic where id=#{id} and delete_time is null;
    </select>


<!--    根据用户id 和classic的id查询是否为用户喜欢-->
    <select id="getLikeStatus" parameterType="com.answer.base.dto.UidAndIdDTO" resultType="java.lang.Boolean">
        select count(*) from user_like_classic where uid=#{uid} and cid=#{id}
    </select>
</mapper>


