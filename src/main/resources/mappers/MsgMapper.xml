<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.answer.base.dao.MsgMapper">
    <!-- id:statement的id 或者叫做sql的id-->
    <!-- parameterType:声明输入参数的类型 -->
    <!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
    <!-- #{}：输入参数的占位符，相当于jdbc的？ -->
    <resultMap id="MsgMap" type="CommentMsg">
        <id column="id" property="id" jdbcType="INTEGER"></id>
    </resultMap>
    <insert id="insertMsg" parameterType="com.answer.base.entity.CommentMsg">
        insert into msg
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="type !=null">
                type,
            </if>
            <if test="commentId!=null">
                comment_id,
            </if>
            <if test="isRoot!=null">
                is_root,
            </if>
            <if test="uid!=null">
                uid,
            </if>
        </trim>
        <trim prefix="values(" suffix=")" suffixOverrides=",">
            <if test="type !=null">
                #{type},
            </if>
            <if test="commentId !=null">
                #{commentId},
            </if>
            <if test="isRoot !=null">
                #{isRoot},
            </if>
            <if test="uid!=null">
                #{uid},
            </if>
        </trim>

    </insert>

    <select id="getMyCommentMsgList" parameterType="INTEGER" resultType="com.answer.base.vo.CommentMsgVO">
        select m.create_time as createTime, m.id,m.comment_id as commentId,m.is_root as isRoot,m.is_read as isRead,m.type,h.id as holeOrClassicId,u.user_name as userName,u.avatar_url as avatarUrl,h.title,h_com.content from msg m join hole_comment h_com on h_com.id=m.comment_id  join hole h on h.id=h_com.hid join user u on u.id=h_com.uid where m.uid=#{uid} and m.delete_time is null
    </select>

    <select id="getMyClassicMsgList" parameterType="INTEGER" resultType="com.answer.base.vo.CommentMsgVO">
        select m.create_time as createTime,m.id,m.comment_id as commentId,m.is_root as isRoot,m.is_read as isRead,m.type,c.id as holeOrClassicId,u.user_name as userName,u.avatar_url as avatarUrl,c.title,com.content from msg m join comment com on com.id=m.comment_id  join classic c on c.id=com.classic_id join user u on u.id=com.uid where m.uid=#{uid} and m.delete_time is null
    </select>
</mapper>
