<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.answer.base.dao.LetterMapper">
    <resultMap id="letterMap" type="Letter">
        <id column="id" property="id"></id>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"></result>
        <result column="plan_time" property="planTime" jdbcType="TIMESTAMP"></result>
    </resultMap>

    <sql id="monthBase">
        SELECT 1 as label
        UNION  SELECT 2 as label
        UNION  SELECT 3 as label
        UNION  SELECT 4 as label
        UNION  SELECT 5 as label
        UNION  SELECT 6 as label
        UNION  SELECT 7 as label
        UNION  SELECT 8 as label
        UNION  SELECT 9 as label
        UNION  SELECT 10 as label
        UNION  SELECT 11 as label
        UNION  SELECT 12 as label
        UNION  SELECT 13 as label
        UNION  SELECT 14 as label
        UNION  SELECT 15 as label
        UNION  SELECT 16 as label
        UNION  SELECT 17 as label
        UNION  SELECT 18 as label
        UNION  SELECT 19 as label
        UNION  SELECT 20 as label
        UNION  SELECT 21 as label
        UNION  SELECT 22 as label
        UNION  SELECT 23 as label
        UNION  SELECT 24 as label
        UNION  SELECT 25 as label
        UNION  SELECT 26 as label
        UNION  SELECT 27 as label
        UNION  SELECT 28 as label
        UNION  SELECT 29 as label
        UNION  SELECT 30 as label
        UNION  SELECT 31 as label
    </sql>

    <insert id="insertOne" parameterType="com.answer.base.entity.Letter">
        insert into letter(uid,title,content,email,plan_time,type) values(#{uid},#{title},#{content},#{email},#{planTime},#{type}) ON DUPLICATE KEY
         UPDATE title = values(title),content=values(content),email=values(email),plan_time=values(plan_time)
    </insert>

    <select id="getMyLetter" parameterType="INTEGER" resultMap="letterMap">
        select  * from letter where uid = #{uid} and delete_time is null
    </select>
    <select id="getMyLetterList"  resultMap="letterMap">
        select * from letter where uid = #{uid} and delete_time is null
    </select>

    <update id="updateMyLetter" parameterType="com.answer.base.entity.Letter">
        update letter
        <set>
            <if test="email">
                email=#{email},
            </if>
            <if test="content">
                content=#{content},
            </if>
            <if test="title">
                title=#{title},
            </if>
        </set>
        where id=#{id} and uid =#{uid}
    </update>

<!--    根据 keyword的不同获取已经过时间(future) 和未过期的信件 (past) -->
    <select id="getLetterList" resultType="com.answer.base.vo.LetterVO">
        select
        l.id,
        l.create_time as createTime,
        l.title,
        l.email,
        l.type,
        l.image,
        (case when l.type=1 then "********" else l.content end) content,
        l.pending,
        l.uid,
        l.plan_time as planTime,
        l.post_time as postTime,
        u.user_name as userName,
        u.avatar_url as avatarUrl
        from letter l join user u on u.id = l.uid
        where l.delete_time is null
        <if test='keyword=="future"'>
            and l.plan_time >= current_timestamp
        </if>
        <if test='keyword=="past"'>
            and l.plan_time &lt;= current_timestamp
        </if>

    </select>

    <select id="getLetterMonthPlan" resultType="com.answer.base.vo.MonthCountVO">
        select a.label,IFNULL(b.value,0) as value from(<include refid="monthBase"></include>) a LEFT JOIN  (select CONVERT(DATE_FORMAT(plan_time,'%d'),SIGNED) as label, COUNT(*) as `value` FROM letter WHERE DATE_FORMAT(plan_time,'%Y%m')=DATE_FORMAT(concat(#{y},"-",#{m},"-01"),'%Y%m') GROUP BY TO_DAYS(plan_time)) b on a.label = b.label
    </select>

    <select id="getLetterListByTime" resultType="com.answer.base.vo.LetterVO">
        select
        l.id,
        l.create_time as createTime,
        l.email,
        l.type,
        l.pending,
        l.plan_time as planTime,
        l.post_time as postTime,
        u.user_name as userName,
        u.avatar_url as avatarUrl
        from letter l join user u on u.id = l.uid
        where l.delete_time is null and to_days(concat(#{y},"-",#{m},"-",#{d})) = to_days(l.plan_time)
    </select>

    <select id="getPlanLetterById" resultType="com.answer.base.vo.LetterVO">
        select id,title,content,type,email,image from letter where pending = false and id =#{id} and delete_time is null and plan_time &lt; current_timestamp
    </select>
    <update id="setLetterOverById">
        update letter
        <set>
            pending = true,post_time = current_timestamp
        </set>
        where id = #{id}
    </update>
    <select id="getPublicLetterById" resultType="com.answer.base.vo.LetterVO">
        select
        l.id,
        l.create_time as createTime,
        l.email,
        l.type,
        l.image,
        l.title,
        l.content,
        l.pending,
        l.plan_time as planTime,
        l.post_time as postTime,
        u.user_name as userName,
        from letter l join user u on u.id = l.uid
        where l.type != 1 and l.id = #{id}
    </select>


    <select id="getMyLetterDetail" resultType="com.answer.base.vo.LetterVO">
        select
        l.id,
        l.create_time as createTime,
        l.email,
        l.type,
        l.image,
        l.title,
        l.content,
        l.pending,
        l.plan_time as planTime,
        l.post_time as postTime,
        u.user_name as userName,
        u.avatar_url as avatarUrl
        from letter l join user u on l.uid = u.id where l.uid = #{uid} and l.id = #{id} and  l.delete_time is null
    </select>
    <update id="delMyLetter">
        update letter
        <set>
            delete_time = current_timestamp
        </set>
        where uid = #{uid} and id= #{id} and delete_time is null
    </update>
    <update id="setLetterImage">
        update letter
        <set>
            image = #{image}
        </set>
        where id = #{id} and type != 1 and delete_time is null
    </update>
</mapper>