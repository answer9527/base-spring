<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace：命名空间，用于隔离sql，还有一个很重要的作用，后面会讲 -->
<mapper namespace="com.answer.base.dao.CustomerMapper">
    <!-- id:statement的id 或者叫做sql的id-->
    <!-- parameterType:声明输入参数的类型 -->
    <!-- resultType:声明输出结果的类型，应该填写pojo的全路径 -->
    <!-- #{}：输入参数的占位符，相当于jdbc的？ -->

    <!-- 通过id查询一个用户 -->
    <resultMap type="Customer" id="CustomerMap">
        <id column="id" property="id" jdbcType="INTEGER"></id>
<!--        <result column="job" property="job" jdbcType="VARCHAR"></result>-->
<!--        <result column="resident" property="resident" jdbcType="VARCHAR"></result>-->
<!--        <result column="sex" property="sex" jdbcType="INTEGER"></result>-->
        <result column="marital_status" property="maritalStatus" jdbcType="INTEGER"></result>
    </resultMap>

    <sql id="base_column_list">
        id,avatar_url,resident
    </sql>

<!--根据id获取一个-->
    <select id="getCustomer" parameterType="INTEGER" resultMap="CustomerMap">
<!--        select <include refid="base_column_list"></include> from user where id=#{id};-->
        select <include refid="base_column_list"></include> from customer where id=#{id};
    </select>

<!--    获取所有的-->
    <select id="getAllCount" parameterType="INTEGER" resultMap="CustomerMap">
        select <include refid="base_column_list"></include> from customer;
    </select>



</mapper>
